#!/usr/bin/env python

from __future__ import with_statement

import sys
sys.dont_write_bytecode = True
#sys.path.insert(0, '/Users/ayshen/work/repo/gdata-2.0.11/src')
with open('libgdata.path', 'r') as pathfile:
    sys.path.insert(0, pathfile.readline().strip())
import datetime
import urllib

import atom
import atom.service
import gdata
import gdata.calendar as gcal
import gdata.calendar.data as gcal_data
import gdata.calendar.service as gcal_service


def Authenticate (email=None, password=None):
    """Authenticate to Google Calendar with the given credentials.

    Parameters:
    email       Email of account to authenticate.
    password    Password for given email.

    Return value
    On success, returns the gdata.calendar.CalendarService object
    authenticated with the given credentials.
    On failure, bubbles the Exception generated by ProgrammaticLogin().
    """
    if not email or not password:
        raise TypeError, ("incomplete credentials email=%s password=%s" %
                (str(email), ("YES" if password else "NO")))
    calserv = gcal_service.CalendarService()
    calserv.email = email
    calserv.password = password
    calserv.source = "CCHDO-db_history_autoupdate-1.0"
    calserv.ProgrammaticLogin()
    return calserv


def ReadEventBatch (filename):
    """Read a event batch file.

    Parameters:
    filename    Name of event batch file.

    File format
    -> $ denotes a newline; '$' denotes chr(36).
    -> Pythonic string substitution/format.

event_batch_file:
                | events;
events:
      | events event;
event: date $ type $ title $ content ;
date: '%04d-%02d-%02d' % (year, month, day) ;
type: DOC_EVT
    | DOC_NO_EVT
    | EVT_NO_DOC
    | MAP
    | SUBMIT
    ;
title: STR ;
content:
       | content content_line
       ;
content_line: STR ;
    """
    events = []
    with open(filename, 'r') as file:
        buffer = file.readlines()
        while len(buffer) > 0:
            evt = {}
            evt["date"] = datetime.datetime.strptime(
                    buffer.pop(0).strip(), '%Y-%m-%d')
            evt["type"] = buffer.pop(0).strip()
            evt["title"] = buffer.pop(0).strip()
            content = []
            while len(buffer) > 0 and buffer[0] != '\n':
                content.append(buffer.pop(0).strip())
            if len(buffer) != 0: del buffer[0]
            evt["content"] = "\n".join(content)
            events.append(evt)
    return events


def GetCalendarBatchURI (caltype):
    """Get a batch URI for a specific calendar type.

    NB. this function MUST NOT be used with any other service.
    """
    CALENDARS = {
    "DOC_EVT": "33ou6hmvq1rot0ermcrsj4holc@group.calendar.google.com",
    "DOC_NO_EVT": "74n2plv4nfclljktijj7a42ujo@group.calendar.google.com",
    "EVT_NO_DOC": "dhu4ok0kcf13fp0c562ner5514@group.calendar.google.com",
    "MAP": "el92aob7iuo6f24bbi3ffsjvg4@group.calendar.google.com",
    "SUBMIT": "i3lkver56mse5putkv74nh4gu0@group.calendar.google.com",
    }
    return "/calendar/feeds/%s/private/full/batch" % CALENDARS[caltype]


def ErrorStringForEvent (event):
    return "\n".join([
            "BEGIN:VEVENT",
            "DTSTAMP:%s" % datetime.date.today().strftime("%Y%m%d"),
            "DTSTART:%s" % event.when[0].start_time,
            "DTEND:%s" % event.when[0].end_time,
            "SUMMARY:%s" % event.title.text,
            "DESCRIPTION:%s" % event.content.text,
            "END:VEVENT",])


def AddEventBatch (calserv, batch):
    """Add an event batch to authenticated calendars.

    Parameters:
    calserv     Authenticated gdata.calendar.CalendarService object.
    batch       List of events to be batch-added.
                len(batch) SHOULD NOT exceed 50.
    """
    request_feeds = {}
    for evt in batch:
        Entry = gcal.CalendarEventEntry()
        Entry.title = atom.Title(text=evt["title"])
        Entry.content = atom.Content(text=evt["content"])
        Entry.when.append(gcal.When(
                start_time=evt["date"].strftime("%Y-%m-%d"),
                end_time=(evt["date"] + datetime.timedelta(days=1)
                ).strftime("%Y-%m-%d")))
        Entry.batch_id = gdata.BatchId(text='insert-request')

        if evt["type"] not in request_feeds:
            request_feeds[evt["type"]] = gcal.CalendarEventFeed()

        request_feeds[evt["type"]].AddInsert(entry=Entry)

    response_feeds = {}
    failed = []
    for feedname in request_feeds:
        response_feeds[feedname] = calserv.ExecuteBatch(
                request_feeds[feedname],
                GetCalendarBatchURI(feedname))
        if len(response_feeds[feedname].entry) == 1 and \
                not response_feeds[feedname].entry[0].batch_status:
            print >> sys.stderr, "I think something went horribly wrong!"
            sys.exit(2)
        for i, response in enumerate(response_feeds[feedname].entry):
            if response.batch_status and \
                    int(int(response.batch_status.code) / 100) != 2:
                failed.append(ErrorStringForEvent(
                        request_feeds[feedname].entry[i]))
    return failed


def AddAll (calserv, batch):
    tmp = batch[:]
    failed = []
    while len(tmp) > 50:
        failed += AddEventBatch(calserv, tmp[:50])
        tmp = tmp[50:]
    failed += AddEventBatch(calserv, tmp)
    return failed


GHDC = {
    "email": "ghdc.sio@gmail.com",
    "password": urllib.unquote("%63%63%68%64%30%40%33%31%35")
}


def main ():
    if len(sys.argv[1:]) == 0:
        print >> sys.stderr, "db_history_upload: no event batch file"
        sys.exit(1)
    service = Authenticate(GHDC["email"], GHDC["password"])
    failed = AddAll(service, ReadEventBatch(sys.argv[1]))
    faillog = """\
BEGIN:VCALENDAR
PRODID:-//CCHDO DB_HISTORY 1.0//EN
VERSION:2.0
""" +"\n\n".join(failed) + "\nEND:VCALENDAR"
    if len(sys.argv[2:]) == 0:
        print faillog
    else:
        with open(sys.argv[2], 'w') as f:
            f.write(faillog)
    sys.exit(0)


if __name__ == '__main__':
    main()

